" BASIC
set nu
set relativenumber
set mouse=a
set cursorline
set nocompatible " No vi compatility, this first because it resets some options
let mapleader="\<Space>" " Mapleader, skylerto
filetype off
set encoding=utf-8
set history=1000  " Keep more history, default is 20
set expandtab
set laststatus=2
set ruler
set wildmenu
set showcmd
set notimeout
set iskeyword+=-
set ff=unix

" System Clipboard
"" Arch
set clipboard+=unnamedplus
"" macOS
set clipboard+=unnamed

" paste mode for logical insertion, skylerto
nnoremap <C-;> :set invpaste paste?<CR>
set pastetoggle=<C-;>
set showmode

" Install Vim Plug if not installed
if empty(glob('~/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

" Do the plugins
"set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')

  Plug 'tsandall/vim-rego'

  " Plug 'scrooloose/syntastic'

  " Plug 'SirVer/ultisnips'

  Plug 'neomake/neomake'
  Plug 'kassio/neoterm'

  Plug 'scrooloose/nerdtree'

  " TPOPE FTW
  " Plug 'tpope/vim-rails', { 'for': 'ruby' } " Utils for rails
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-fugitive' " Git
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-commentary' " Comment stuff out with gc in visual mode
  Plug 'tpope/vim-surround'
  " Plug 'tpope/vim-speeddating'
  " Plug 'tpope/vim-dispatch'
  " Plug 'tpope/vim-vinegar'
  " Plug 'thoughtbot/vim-rspec'

  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'

  Plug 'PProvost/vim-ps1'


  Plug 'codescv/vim-matchit' " Brackets

  " if has('nvim')
    " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  " else
  "   Plug 'Shougo/deoplete.nvim'
  "   Plug 'roxma/nvim-yarp'
  "   Plug 'roxma/vim-hug-neovim-rpc'
  " endif

  " Languages
  " Plug 'tpope/vim-markdown'
  Plug 'plasticboy/vim-markdown'
  Plug 'godlygeek/tabular'
  Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
  Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
  Plug 'fatih/vim-go', { 'for': 'go' }
  Plug 'rust-lang/rust.vim', { 'for': 'rust' }
  Plug 'cespare/vim-toml'

  " Plug 'derekwyatt/vim-scala'
  " Plug 'evanmiller/nginx-vim-syntax'
  Plug 'hashivim/vim-terraform'


  " Plug 'MarcWeber/vim-addon-mw-utils'
  " Plug 'tomtom/tlib_vim'

  " Snipepts
  " Plug 'honza/vim-snippets'
  " Plug 'garbas/vim-snipmate'

  Plug 'mattn/emmet-vim'

  " Plug 'Shougo/vimproc.vim', { 'do' : 'make' }
  " Plug 'Quramy/tsuquyomi'
  "
  "Typescript Plugins
  " Plug 'Shougo/vimproc.vim', { 'do': 'make' }
  " Plug 'Quramy/tsuquyomi', { 'do': 'npm install -g typescript' }
  " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  " Plug 'mhartington/deoplete-typescript', { 'for': 'typescript' }
  " Plug 'mhartington/nvim-typescript', { 'do': './install.sh' }

  " Plug 'leafgarland/typescript-vim'
  " Plug 'Valloric/YouCompleteMe', { 'do': './install.py --rust-completer --go-completer' }




  Plug 'airblade/vim-gitgutter'

  Plug 'ervandew/supertab'
  Plug 'christoomey/vim-tmux-navigator'


  "" Plug 'vadv/vim-chef'
  " Plug 'albfan/ag.vim'
  " Plug 'rking/ag.vim'
  Plug 'ervandew/supertab'

  "" THEMES
  Plug 'altercation/vim-colors-solarized' " Colour Scheme
  " Plug 'junegunn/seoul256.vim'
  " Plug 'mhartington/oceanic-next'
  " Plug 'chriskempson/vim-tomorrow-theme'
  " Plug 'flazz/vim-colorschemes'

  Plug 'chriskempson/base16-vim'


  " Plug 'HerringtonDarkholme/yats.vim'

  " Plug 'cakebaker/scss-syntax.vim'
  " Plug 'ajmwager/vim-dues'
  " Plug 'dansomething/vim-eclim'
  Plug 'w0rp/ale'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'


  Plug 'HerringtonDarkholme/yats.vim'
  Plug 'mhartington/nvim-typescript', {'do': './install.sh'}
 " For async completion
  Plug 'Shougo/deoplete.nvim'
 " For Denite features
  Plug 'Shougo/denite.nvim'

  " Plug 'mhartington/deoplete-typescript'
  Plug 'editorconfig/editorconfig-vim'

call plug#end()

" au BufRead,BufNewFile * Neomake!
" autocmd! BufWritePost * Neomake!
" autocmd InsertChange * update | Neomake!
" let g:neomake_javascript_enabled_makers = ['eslint']
" let g:neomake_javascript_eslint_exe = $PWD .'/node_modules/.bin/eslint'

" autocmd Filetype ruby setlocal makeprg=rubocop
" let g:neomake_ruby_enabled_makers = ['rubocop']

autocmd Filetype typescript setlocal makeprg=tslint
let g:neomake_typescript_enabled_makers = ['tslint']
" let g:neomake_typescript_enabled_makers = ['']
" autocmd BufWritePost *.ts :Neomake tslint
" autocmd BufReadPre,FileReadPre *.ts :Neomake tslint

" filetype plugin indent on
"
" deoplete
" let g:deoplete#enable_at_startup = 1
" let g:deoplete#enable_ignore_case = 1
" let g:deoplete#auto_complete_start_length = 0
" let g:auto_complete_start_length = 0
" let g:deoplete#enable_refresh_always = 1
" let g:deoplete#enable_debug = 1
" let g:deoplete#enable_profile = 1



" call deoplete#enable_logging('DEBUG', 'deoplete.log')

" let g:tern_request_timeout = 1
" let g:tern_request_timeout = 6000
" let g:tern#command = ["tern"]
" let g:tern#arguments = ["--persistent"]
" let g:deoplete#sources#tss#javascript_support = 1
" let g:tsuquyomi_javascript_support = 1
" let g:tsuquyomi_auto_open = 1
" let g:tsuquyomi_disable_quickfix = 1

" set runtimepath^=~/.vim/bundle/ctrlp.vim
" if !exists("g:ycm_semantic_triggers")
"    let g:ycm_semantic_triggers = {}
" endif
" let g:ycm_semantic_triggers['typescript'] = ['.']

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_loc_list_height = 5
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 1
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_typescript_tsc_args = "--experimentalDecorators"
" let g:syntastic_typescript_tsc_fname = ''
" " let g:syntastic_typescript_tslint_args = "--config /Users/skylerl/dev/shuttleops/shuttleops-core/web/src/tslint.json"
" " let g:syntastic_typescript_checkers = ['tslint', 'tsc']
" let g:syntastic_typescript_checkers = []

" emmet
let g:user_emmet_mode='a'    "enable all function in all mode.
let g:user_emmet_leader_key = '<C-x>'
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

let g:supertabdefaultcompletiontype    = '<c-n>'
let g:supertabcrmapping                = 0

" Utilsnippets
let g:ultisnipsexpandtrigger="<tab>"
let g:ultisnipsjumpforwardtrigger="<c-b>"
let g:ultisnipsjumpbackwardtrigger="<c-z>"
let g:ultisnipsexpandtrigger           = '<tab>'
let g:ultisnipsjumpforwardtrigger      = '<tab>'
let g:ultisnipsjumpbackwardtrigger     = '<s-tab>'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " macosx/linux
set wildignore+=.git/**,public/assets/**,vendor/**,log/**,tmp/**,cellar/**
set wildignore+=app/assets/images/**,_site/**,home/.vim/bundle/**,pkg/**
set wildignore+=**/.gitkeep,**/.ds_store,**/*.netrw*,node_modules/*,*.class,dist/*,*/target/**

"filetype plugin indent on " enable after vundle loaded

" allow editing crontabs http://vim.wikia.com/wiki/editing_crontab
set backupskip=/tmp/*,/private/tmp/* "
set undodir=~/.vim/undo
set noswapfile " because no need
set nobackup

syntax enable
set t_co=256 " 2000s plz
" set textwidth=100
set textwidth=120
"120  " switch line at 80 characters
set scrolloff=5   " keep some distance to the bottom"
" set showmatch     " show matching of: () [] {}
set ignorecase    " required for smartcase to work
set smartcase     " case sensitive when uppercase is present
set incsearch     " search as you type
set smartindent   " Be smart about indentation
set expandtab     " Tabs are spaces
set smarttab
set shell=bash    " load shell for ruby version etc.
" set shellcmdflag=-ic

set tabstop=2 " Tabs are 2 spaces
set backspace=2 " Backspace deletes 2 spaces
set shiftwidth=2 " Even if there are tabs, preview as 2 spaces

" set list " Highlight trailings, stolen from @teoljungberg
" set listchars=tab:>-,trail:.,extends:>,precedes:<

" TODO
set tags=tags,.git/tags "Use commit hook tags, see ~/.git_template


" Sane behavior on long lines
nmap k gk
nmap j gj
noremap H ^
noremap L $

" vim-fugative, make my life easier.
map <leader>gs :Gstatus<CR> " Get status
map <leader>gw :Gwrite<CR> " Stage the current file for a commit
map <leader>gc :Gcommit<CR> " Commit
map <leader>gp :Gpush<CR> " Push changes

" Save files changing flow to ctrl+s maybe
noremap <leader>s :wa

" Quit
nnoremap <leader>q :bd<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>wq :wq<CR>

" Undo/Redo
map <leader>u :u<CR> " undo
map <leader>z :redo<CR> " redo

" Run the current ruby file.
autocmd Filetype ruby nnoremap <leader>x :!ruby %<cr>
" nnoremap <leader>x :Dispatch npm run build.dev<CR>
" nnoremap <leader>x !./bin/install.sh<CR>

" Rename current file, thanks Gary Bernhardt via Ben Orenstein
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>r :call RenameFile()<cr>

" Edit files in new vertical split
function! EditFile()
  let new_file = input('Edit file name: ')
  if new_file != ''
    exec ':vsplit ' . new_file
  endif
endfunction
map <leader>e :call EditFile()<cr>

" Run ruby tests
function! TestFile()
  let file = expand('%')
  exec ':T bundle exec rspec ' . file
endfunction
noremap <leader>tf :call TestFile()<cr>


" Sane default tab-key, replaces Supertab.
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction

" What is the purpose ?
imap <tab>   <c-r>=InsertTabWrapper()<cr>
imap <s-tab> <c-p>
imap <tab> <c-n>


" Fix for WTF colors
let t_Co=256
" let g:solarized_termcolors=256
" let g:solarized_termcolors = 16
let g:solarized_termtrans = 1
" let g:solarized_visibility = "high"
" let g:solarized_contrast = "high"
set background=dark
" set background=light
"

" .vimrc
if filereadable(expand('~/.vim/plugged/vim-colors-solarized/colors/solarized.vim'))
  if has("gui_vimr")
    colorscheme seoul256
  else
    colorscheme solarized
  endif
endif

" colorscheme Tomorrow-Night
" colorscheme material

" set guifont=Inconsolata:h12
" set guioptions-=T " Removes top toolbar
" set guioptions-=r " Removes right hand scroll bar
" set go-=L " Removes left hand scroll bar

" let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git|dist'
" let g:syntastic_typescript_checkers = ['tsc', 'tslint']
" let g:syntastic_typescript_checkers = ['tsuquyomi', 'tslint']

let g:ycm_key_list_select_completion = ['<TAB>']
" let g:syntastic_ruby_checkers = ['rubocop', 'mri']

let NERDTreeShowHidden=1
noremap - :NERDTreeToggle<CR>
noremap <leader>- :NERDTreeFind<CR>
noremap <leader>; <C-w>R

noremap <leader>sv :source ~/.vimrc<CR>

" Set lines back to white
" highlight LineNr ctermfg=white



nnoremap <leader>s :w <CR>
nnoremap <leader>v :vsp <CR>

map <C-b> :Buffers<CR>
map <C-t> :Tags<CR>

" What is this for: nmap ,d :b#<bar>bd#<CR>
" nnoremap <leader>x :T bundle exec rspec spec<CR>


" File types
au BufRead,BufNewFile *.rb setfiletype ruby
au BufRead,BufNewFile *.gemspec setfiletype ruby
au BufRead,BufNewFile Rakefile setfiletype ruby
au BufRead,BufNewFile Vagrantfile setfiletype ruby
au BufRead,BufNewFile Jenkinsfile setfiletype groovy
au BufRead,BufNewFile .studiorc setfiletype sh
au BufRead,BufNewFile .studiorc set syntax=sh
au BufRead,BufNewFile .studio/* setfiletype sh
au BufRead,BufNewFile .studio/* set syntax=sh
au BufRead,BufNewFile *.md setlocal spell
au BufNewFile,BufRead *.md,*.markdown set spell

autocmd FileType go,gitcommit,qf,gitset setlocal nolist " Go fmt will use tabs
autocmd FileType html,css setlocal shiftwidth=2 tabstop=2 noexpandtab
autocmd FileType xml setlocal shiftwidth=2 tabstop=2 noexpandtab
autocmd FileType java setlocal shiftwidth=2 tabstop=2 noexpandtab
autocmd FileType sql setlocal shiftwidth=2 tabstop=2 noexpandtab
au FileType html,css EmmetInstall
" autocmd FileType java setlocal shiftwidth=2 tabstop=2 noexpandtab

autocmd FileType typescript setlocal shiftwidth=2 tabstop=2 noexpandtab
au FileType typescript nnoremap <C-t> :pop<CR>

" GO Config
au FileType go set expandtab
au FileType go set shiftwidth=4
au FileType go set softtabstop=4
au FileType go set tabstop=4
au FileType go nnoremap <leader>gd :GoDef<CR>
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 1
" Error and warning signs.
let g:ale_sign_error = '⤫'
let g:ale_sign_warning = '⚠'
" Enable integration with airline.
let g:airline#extensions#ale#enabled = 1
" au FileType go nmap <leader> <Plug>(go-def)

"  linters
let g:ale_linters = {
\  'javascript': ['eslint'],
\  'typescript': ['tslint'],
\}
" enable filetypes using the associated linting program
" Recently changed to test if using npx enforces local linters instead of global
" let g:ale_fixers = {
" \   'javascript': ['eslint'],
" \   'javascript.jsx': ['eslint'],
" \   'typescript': ['tslint'],
" \}
" lint on saves
let g:ale_fix_on_save = 1


" Useful maps for TERMINAL
" hide/close terminal
nnoremap <silent> ,th :call neoterm#close()<cr>
" clear terminal
nnoremap <silent> ,tl :call neoterm#clear()<cr>
" kills the current job (send a <c-c>)
nnoremap <silent> ,tc :call neoterm#kill()<cr>
tnoremap <Esc> <C-\><C-n>

" Buffer Movement
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h
map <leader>d :bd<CR>
nnoremap <C-n> :bprevious<CR>
nnoremap <C-m> :bnext<CR>

" nnoremap <C-J> <C-W>j
" nnoremap <C-K> <C-W>k
" nnoremap <C-L> <C-W>l
" " Solution for now
" nnoremap <BS> <C-W>h

" I hate myself, no arrow keys in normal mode
imap jk <Esc>
imap jj <Esc>
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

map <leader>t :exe ":normal i" . strftime('%c')<CR>

nnoremap <leader>t :r! date<CR>
" inoremap <F5> <C-R>=strftime("%c")<CR>



" AIRLINE
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
" let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'
" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
" let g:airline_right_sep = '◀'

" FZF Options
nnoremap <C-p> :FZF<CR>
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git --ignore node_modules -l -g ""'
let $FZF_DEFAULT_COMMAND = "rg --files --follow --hidden --glob '!.git/*' --glob '!sorbet/**' --glob '!tags' --glob '!yarn.lock' --glob '!package.json' --glob '!vendor/**'"

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

map <C-f> :Rg<CR>

" noremap <leader>b :rightbelow T nvim +H2oBuild && read junk && exit <CR>
" noremap <leader>b :Dispatch hab studio build . <CR>
" noremap <leader>l :rightbelow T nvim +H2oRun && read junk && exit <CR>


" noremap <leader>f :set formatoptions-=t <CR>
"

" Because sometimes I hold shift to long, sue me...
command! WQ wq
command! Wq wq
command! W w
command! Q q


" Funzies
" Add a little love with leader l
" map <leader>l :exe ":normal i" . "♥"<CR>


" nnoremap <CR> <Nop>

nnoremap <leader>n :tabn <CR>
nnoremap <leader>p :tabp <CR>

" https://stackoverflow.com/questions/4946421/vim-moving-with-hjkl-in-long-lines-screen-lines
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")

" set autochdir
set tags=./tags,tags;
function! BuildCtags()
  silent execute ":!bash -lc ctags-build"
endfunction
command! -nargs=* BuildCtags call BuildCtags()

function! BuildCscope()
  silent execute ":!bash -lc cscope-build"
endfunction
command! -nargs=* BuildCscope call BuildCscope()

function! SNote(...)
  let path = strftime("%Y%m%d%H%M")." ".trim(join(a:000)).".md"
  execute ":sp " . fnameescape(path)
endfunction
command! -nargs=* SNote call SNote(<f-args>)

function! Note(...)
  let path = strftime("%Y%m%d%H%M")." ".trim(join(a:000)).".md"
  execute ":e " . fnameescape(path)
endfunction
command! -nargs=* Note call Note(<f-args>)

function! ZettelkastenSetup()
  syn region mkdFootnotes matchgroup=mkdDelimiter start="\[\["    end="\]\]"

  inoremap <expr> <plug>(fzf-complete-path-custom) fzf#vim#complete#path("rg --files -t md \| sed 's/^/[[/g' \| sed 's/$/]]/'")
  imap <buffer> [[ <plug>(fzf-complete-path-custom)

  function! s:CompleteTagsReducer(lines)
    if len(a:lines) == 1
      return "#" . a:lines[0]
    else
      return split(a:lines[1], '\t ')[1]
    end
  endfunction

  inoremap <expr> <plug>(fzf-complete-tags) fzf#vim#complete(fzf#wrap({
        \ 'source': 'bash -lc "zk-tags-raw"',
        \ 'options': '--ansi --nth 2 --print-query --exact --header "Enter without a selection creates new tag"',
        \ 'reducer': function('<sid>CompleteTagsReducer')
        \ }))
  imap <buffer> # <plug>(fzf-complete-tags)


  " setlocal formatoptions+=a
  imap <imap> -- —
endfunction

" Don't know why I can't get FZF to return {2}
function! InsertSecondColumn(line)
  " execute 'read !echo ' .. split(a:e[0], '\t')[1]
  exe 'normal! o' .. split(a:line, '\t')[1]
endfunction

" command! ZKR call fzf#run(fzf#wrap({
"         \ 'source': 'ruby scripts/tag-related.rb "' .. bufname("%") .. '"',
"         \ 'options': '--ansi --exact --nth 2',
"         \ 'sink':    function("InsertSecondColumn")
"       \}))

autocmd BufNew,BufNewFile,BufRead ~/notes/*.md call ZettelkastenSetup()
autocmd BufNew,BufNewFile,BufRead ~/Dropbox/notes/*.md call ZettelkastenSetup()
