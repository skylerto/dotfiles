" BASIC
set nu
set relativenumber
set mouse=a
set cursorline
set nocompatible " No vi compatility, this first because it resets some options
let mapleader="\<Space>" " Mapleader, skylerto
filetype off
set encoding=utf-8
set history=1000  " Keep more history, default is 20
set expandtab
set laststatus=2
set ruler
set wildmenu
set showcmd

" paste mode for logical insertion, skylerto
nnoremap <C-;> :set invpaste paste?<CR>
set pastetoggle=<C-;>
set showmode

" Do the plugins
"set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')

  Plug 'neomake/neomake'

  Plug 'scrooloose/nerdtree'


  " Plug 'scrooloose/syntastic'
  " Plug 'SirVer/ultisnips'

  " TPOPE FTW
  Plug 'tpope/vim-rails', { 'for': 'ruby' } " Utils for rails
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-fugitive' " Git
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-commentary' " Comment stuff out with gc in visual mode
  Plug 'tpope/vim-surround'

  " Plug 'kien/ctrlp.vim' " Fuzzy finder
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'


  Plug 'codescv/vim-matchit' " Brackets

  " Languages
  Plug 'tpope/vim-markdown'
  Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
  Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
  ""  Plug 'leafgarland/typescript-vim'

  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'tomtom/tlib_vim'

  " Snipepts
  " Plug 'honza/vim-snippets'
  " Plug 'garbas/vim-snipmate'

  Plug 'mattn/emmet-vim'

  Plug 'Shougo/vimproc.vim', { 'do' : 'make' }
  Plug 'Quramy/tsuquyomi'
  " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins', 'for': 'typescript' }
  " Plug 'mhartington/deoplete-typescript', { 'for': 'typescript' }

  Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }

  Plug 'airblade/vim-gitgutter'

  Plug 'ervandew/supertab'
  Plug 'christoomey/vim-tmux-navigator'

  Plug 'tpope/vim-dispatch'

  "" Plug 'vadv/vim-chef'
  Plug 'albfan/ag.vim'
  Plug 'ervandew/supertab'

  "" THEMES
  Plug 'altercation/vim-colors-solarized' " Colour Scheme
  Plug 'kristijanhusak/vim-hybrid-material'

  Plug 'junegunn/seoul256.vim'
  Plug 'mhartington/oceanic-next'
  Plug 'chriskempson/vim-tomorrow-theme'


  Plug 'HerringtonDarkholme/yats.vim'

  Plug 'jceb/vim-orgmode'
  Plug 'tpope/vim-speeddating'

  Plug 'derekwyatt/vim-scala'
  Plug 'evanmiller/nginx-vim-syntax'

call plug#end()

filetype plugin indent on


let g:deoplete#enable_at_startup = 1

set runtimepath^=~/.vim/bundle/ctrlp.vim
if !exists("g:ycm_semantic_triggers")
   let g:ycm_semantic_triggers = {}
    endif
let g:ycm_semantic_triggers['typescript'] = ['.']

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_javascript_checkers = ['eslint']

" emmet
let g:user_emmet_mode='a'    "enable all function in all mode.
autocmd filetype html,css EmmetInstall
let g:user_emmet_leader_key = '<C-x>'
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" trigger configuration. do not use <tab> if you use https://github.com/valloric/youcompleteme.
let g:ultisnipsexpandtrigger="<tab>"
let g:ultisnipsjumpforwardtrigger="<c-b>"
let g:ultisnipsjumpbackwardtrigger="<c-z>"

let g:supertabdefaultcompletiontype    = '<c-n>'
let g:supertabcrmapping                = 0
let g:ultisnipsexpandtrigger           = '<tab>'
let g:ultisnipsjumpforwardtrigger      = '<tab>'
let g:ultisnipsjumpbackwardtrigger     = '<s-tab>'
let g:ycm_key_list_select_completion   = ['<c-j>', '<c-n>', '<down>']
let g:ycm_key_list_previous_completion = ['<c-k>', '<c-p>', '<up>']


" if you want :ultisnipsedit to split your window.
"let g:ultisnipseditsplit="vertical"

"" ctrlp init
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " macosx/linux
set wildignore+=.git/**,public/assets/**,vendor/**,log/**,tmp/**,cellar/**
set wildignore+=app/assets/images/**,_site/**,home/.vim/bundle/**,pkg/**
set wildignore+=**/.gitkeep,**/.ds_store,**/*.netrw*,node_modules/*,*.class,dist/*,*/target/**

"filetype plugin indent on " enable after vundle loaded

" allow editing crontabs http://vim.wikia.com/wiki/editing_crontab
set backupskip=/tmp/*,/private/tmp/* "
set undodir=~/.vim/undo
set noswapfile " because no need
set nobackup

syntax enable
set t_co=256  " 2000s plz
set textwidth=80  " switch line at 80 characters
set scrolloff=5   " keep some distance to the bottom"
set showmatch     " show matching of: () [] {}
set ignorecase    " required for smartcase to work
set smartcase     " case sensitive when uppercase is present
set incsearch     " search as you type
set smartindent   " Be smart about indentation
set expandtab     " Tabs are spaces
set smarttab
set shell=bash    " load shell for ruby version etc.
" set shellcmdflag=-ic

set tabstop=2 " Tabs are 2 spaces
set backspace=2 " Backspace deletes 2 spaces
set shiftwidth=2 " Even if there are tabs, preview as 2 spaces

set list " Highlight trailings, stolen from @teoljungberg
set listchars=tab:>-,trail:.,extends:>,precedes:<

" TODO
set tags=tags,.git/tags "Use commit hook tags, see ~/.git_template

" Buffer Movement
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h
imap jj <esc>
map <leader>d :bd<CR>

" Sane behavior on long lines
nmap k gk
nmap j gj
noremap H ^
noremap L $

" vim-fugative, make my life easier.
map <leader>gs :Gstatus<CR> " Get status
map <leader>gw :Gwrite<CR> " Stage the current file for a commit
map <leader>gc :Gcommit<CR> " Commit
map <leader>gp :Gpush<CR> " Push changes

" Save files changing flow to ctrl+s maybe
noremap <leader>s :wa

" Quit
nnoremap <leader>q :q<CR>
nnoremap <leader>wq :wq<CR>

" Undo/Redo
map <leader>z :u<CR> " undo
map <leader>re :redo<CR> " redo

" Run the current ruby file.
autocmd Filetype ruby nnoremap <leader>x :!ruby %<cr>
" nnoremap <leader>x :Dispatch npm run build.dev<CR>
nnoremap <leader>x !./bin/install.sh<CR>


" Rename current file, thanks Gary Bernhardt via Ben Orenstein
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>r :call RenameFile()<cr>

" Edit files in new vertical split
function! EditFile()
  let new_file = input('Edit file name: ')
  if new_file != ''
    exec ':vsplit ' . new_file
  endif
endfunction
map <leader>e :call EditFile()<cr>

" Add a little love with leader l
map <leader>l :exe ":normal i" . "â™¥"<CR>


" Sane default tab-key, replaces Supertab.
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
"imap <tab>   <c-r>=InsertTabWrapper()<cr>
imap <s-tab> <c-n>

autocmd BufNewFile,BufRead *.md,*.markdown set spell

autocmd FileType go,gitcommit,qf,gitset setlocal nolist " Go fmt will use tabs

set background=dark
colorscheme solarized
" set background=dark
" colorscheme tomorrow-night
" set background=light
" colorscheme Tomorrow

" set guifont=Inconsolata:h12
" set guioptions-=T " Removes top toolbar
" set guioptions-=r " Removes right hand scroll bar
" set go-=L " Removes left hand scroll bar

let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git|dist'
" let g:syntastic_typescript_checkers = ['tsc', 'tslint']
let g:syntastic_typescript_checkers = ['tsuquyomi', 'tslint']


let g:ycm_key_list_select_completion = ['<TAB>']
let g:syntastic_ruby_checkers = ['rubocop', 'mri']

map <leader>t :NERDTreeToggle<CR>
noremap <leader>; <C-w>R

noremap <leader>sv :source ~/.vimrc<CR>
autocmd FileType ruby,eruby set filetype=ruby.eruby.chef

command! WQ wq
command! Wq wq
command! W w
command! Q q

" Set lines back to white
highlight LineNr ctermfg=white


nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l

" Solution for now
nnoremap <BS> <C-W>h


autocmd BufRead,BufNewFile *.md setlocal spell

let NERDTreeShowHidden=1

autocmd FileType java setlocal shiftwidth=2 tabstop=2 noexpandtab

" let local_eslint = finddir('node_modules', '.;') . '/.bin/eslint'
" if matchstr(local_eslint, "^\/\\w") == ''
"   let local_eslint = getcwd() . "/" . local_eslint
" endif
" if executable(local_eslint)
"   let g:syntastic_javascript_eslint_exec = local_eslint
" endif

nnoremap <leader>s :w <CR>
nnoremap <leader>v :vsp <CR>

autocmd! BufWritePost * Neomake
" autocmd InsertChange * update | Neomake
let g:neomake_javascript_enabled_makers = ['eslint']
" let g:neomake_javascript_eslint_exe = $PWD .'/node_modules/.bin/eslint'

" FZF
nnoremap <C-p> :FZF<CR>
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

nmap ,d :b#<bar>bd#<CR>

nnoremap <leader>n :tabn <CR>
nnoremap <leader>x :!bundle exec rspec spec/
set clipboard=unnamed
