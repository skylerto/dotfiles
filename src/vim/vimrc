" BASIC
set nu
set mouse=a
set cursorline
set nocompatible " No vi compatility, this first because it resets some options
let mapleader="\<Space>" " Mapleader, skylerto
filetype off
set encoding=utf-8
set history=1000  " Keep more history, default is 20

" paste mode for logical insertion, skylerto
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Do the plugins
"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/plugins/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'teoljungberg/vim-grep'

Plugin 'scrooloose/nerdtree' " File explorer
Plugin 'scrooloose/syntastic'

" TPOPE FTW
Plugin 'tpope/vim-rails' " Utils for rails
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive' " Git
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-commentary' " Comment stuff out with gc in visual mode

Plugin 'kien/ctrlp.vim' " Fuzzy finder
Plugin 'altercation/vim-colors-solarized' " Colour Scheme

Plugin 'codescv/vim-matchit' " Brackets

" Languages
Plugin 'othree/es.next.syntax.vim'
Plugin 'nickhutchinson/vim-systemtap'
Plugin 'tpope/vim-liquid'
Plugin 'tpope/vim-markdown'
Plugin 'vim-ruby/vim-ruby'
Plugin 'pangloss/vim-javascript'

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'

Plugin 'thoughtbot/vim-rspec'

" Snipepts
Plugin 'honza/vim-snippets'
"Plugin 'SirVer/ultisnips'
Plugin 'garbas/vim-snipmate'

Plugin 'itchyny/lightline.vim'

Plugin 'Valloric/YouCompleteMe'

Plugin 'mattn/emmet-vim'

Plugin 'kristijanhusak/vim-hybrid-material'

call vundle#end()

" RSpec.vim mappings
let g:rspec_runner = "os_x_iterm2"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
"map <Leader>a :call RunAllSpecs()<CR>
map <Leader>a :!rake <CR>

" STATUS BAR
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'syntastic', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'syntastic': '%{SyntasticStatuslineFlag()}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ },
      \ 'component_visible_condition': {
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ },
    \ 'separator': { 'left': " +> ", 'right': " <+ " },
      \ 'subseparator': { 'left': " +> ", 'right': " <+ " }
      \ }

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_javascript_checkers = ['eslint']

" Emmet
let g:user_emmet_mode='a'    "enable all function in all mode.
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
let g:user_emmet_leader_key='<tab>'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0
"let g:UltiSnipsExpandTrigger           = '<tab>'
"let g:UltiSnipsJumpForwardTrigger      = '<tab>'
"let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']


" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"

"" CTRLP INIT
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.class     " MacOSX/Linux
set wildignore+=.git/**,public/assets/**,vendor/**,log/**,tmp/**,Cellar/**,app/assets/images/**,_site/**,home/.vim/bundle/**,pkg/**,**/.gitkeep,**/.DS_Store,**/*.netrw*,node_modules/*
map <leader>p :CtrlP <CR>

filetype plugin indent on " Enable after Vundle loaded

" Allow editing crontabs http://vim.wikia.com/wiki/Editing_crontab
set backupskip=/tmp/*,/private/tmp/* "
set undodir=~/.vim/undo
set noswapfile " Because no need
set nobackup

syntax enable
set t_Co=256  " 2000s plz
set textwidth=80  " Switch line at 80 characters
set scrolloff=5   " Keep some distance to the bottom"
set showmatch     " Show matching of: () [] {}
set ignorecase    " Required for smartcase to work
set smartcase     " Case sensitive when uppercase is present
set incsearch     " Search as you type
set smartindent   " Be smart about indentation
set expandtab     " Tabs are spaces
set smarttab
set shell=$SHELL\ -l  " load shell for ruby version etc.

set tabstop=2 " Tabs are 2 spaces
set backspace=2 " Backspace deletes 2 spaces
set shiftwidth=2 " Even if there are tabs, preview as 2 spaces

set list " Highlight trailings, stolen from @teoljungberg
set listchars=tab:>-,trail:.,extends:>,precedes:<

" TODO
set tags=tags,.git/tags " Use commit hook tags, see ~/.git_template

" Buffer Movement
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h
imap jk <esc>
map <leader>d :bd<CR>

" Sane behavior on long lines
nmap k gk
nmap j gj
noremap H ^
noremap L $

" vim-fugative, make my life easier.
map <leader>gs :Gstatus<CR> " Get status
map <leader>gw :Gwrite<CR> " Stage the current file for a commit
map <leader>gc :Gcommit<CR> " Commit
map <leader>gp :Gpush<CR> " Push changes

" Toggle nerdtree
map <leader>t :NERDTreeToggle<CR>
let g:NERDTreeShowHidden=1 " Show hidden files in nerdtree

" Save files
map <leader>s :wa<CR>

" Quit
map <leader>q :q<CR>

" Undo/Redo
map <leader>z :u<CR> " undo
map <leader>re :redo<CR> " redo

" Run the current ruby file.
map <leader>x :!ruby %<cr>


" Rename current file, thanks Gary Bernhardt via Ben Orenstein
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>r :call RenameFile()<cr>

" Edit files in new vertical split
function! EditFile()
  let new_file = input('Edit file name: ')
  if new_file != ''
    exec ':vsplit ' . new_file
  endif
endfunction
map <leader>e :call EditFile()<cr>

" Add a little love with leader l
map <leader>l :exe ":normal i" . "â™¥"<CR>


" Sane default tab-key, replaces Supertab.
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
"imap <tab>   <c-r>=InsertTabWrapper()<cr>
imap <s-tab> <c-n>

au BufNewFile,BufRead *.ejson set filetype=json
au BufNewFile,BufRead *.sxx set filetype=stp

autocmd BufNewFile,BufRead *.md,*.markdown set spell

autocmd FileType go,gitcommit,qf,gitset setlocal nolist " Go fmt will use tabs

set background=dark
colorscheme hybrid_material

set guifont=Hack:h10
let g:NERDTreeWinPos = "right"
set guioptions-=T " Removes top toolbar
set guioptions-=r " Removes right hand scroll bar
set go-=L " Removes left hand scroll bar

