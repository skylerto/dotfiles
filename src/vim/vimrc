" BASIC
set nu
set relativenumber
set mouse=a
set cursorline
set nocompatible " No vi compatility, this first because it resets some options
let mapleader="\<Space>" " Mapleader, skylerto
filetype off
set encoding=utf-8
set history=1000  " Keep more history, default is 20
set expandtab
set laststatus=2
set ruler

" paste mode for logical insertion, skylerto
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Do the plugins
"set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')

" let Vundle manage Vundle, required
  Plug 'VundleVim/Vundle.vim'

  Plug 'teoljungberg/vim-grep'

  Plug 'scrooloose/syntastic'

  " TPOPE FTW
  Plug 'tpope/vim-rails' " Utils for rails
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-fugitive' " Git
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-commentary' " Comment stuff out with gc in visual mode
  Plug 'tpope/vim-surround'

  Plug 'kien/ctrlp.vim' " Fuzzy finder
  Plug 'altercation/vim-colors-solarized' " Colour Scheme

  Plug 'codescv/vim-matchit' " Brackets

  " Languages
  Plug 'othree/es.next.syntax.vim'
  Plug 'nickhutchinson/vim-systemtap'
  Plug 'tpope/vim-liquid'
  Plug 'tpope/vim-markdown'
  Plug 'vim-ruby/vim-ruby'
  Plug 'pangloss/vim-javascript'

  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'tomtom/tlib_vim'

  Plug 'thoughtbot/vim-rspec'

  " Snipepts
  Plug 'honza/vim-snippets'
  "Plug 'SirVer/ultisnips
  Plug 'garbas/vim-snipmate'

  Plug 'mattn/emmet-vim'

  Plug 'kristijanhusak/vim-hybrid-material'

  Plug 'leafgarland/typescript-vim'
  Plug 'Quramy/tsuquyomi'
  Plug 'Shougo/vimproc.vim'

  Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
  Plug 'jceb/vim-orgmode'

  Plug 'vitalk/vim-simple-todo'
call plug#end()

filetype plugin indent on

set runtimepath^=~/.vim/bundle/ctrlp.vim
if !exists("g:ycm_semantic_triggers")
   let g:ycm_semantic_triggers = {}
    endif
let g:ycm_semantic_triggers['typescript'] = ['.']


" rspec.vim mappings
let g:rspec_runner = "os_x_iterm2"
map <leader>t :call runcurrentspecfile()<cr>
map <leader>s :call runnearestspec()<cr>
map <leader>l :call runlastspec()<cr>
"map <leader>a :call runallspecs()<cr>
map <leader>a :!rake <cr>

" status bar
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_javascript_checkers = ['eslint']

" emmet
let g:user_emmet_mode='a'    "enable all function in all mode.
let g:user_emmet_install_global = 0
" autocmd filetype html,css EmmetInstall
let g:user_emmet_leader_key='<tab>'

" trigger configuration. do not use <tab> if you use https://github.com/valloric/youcompleteme.
"let g:ultisnipsexpandtrigger="<tab>"
"let g:ultisnipsjumpforwardtrigger="<c-b>"
"let g:ultisnipsjumpbackwardtrigger="<c-z>"

let g:supertabdefaultcompletiontype    = '<c-n>'
let g:supertabcrmapping                = 0
"let g:ultisnipsexpandtrigger           = '<tab>'
"let g:ultisnipsjumpforwardtrigger      = '<tab>'
"let g:ultisnipsjumpbackwardtrigger     = '<s-tab>'
let g:ycm_key_list_select_completion   = ['<c-j>', '<c-n>', '<down>']
let g:ycm_key_list_previous_completion = ['<c-k>', '<c-p>', '<up>']


" if you want :ultisnipsedit to split your window.
"let g:ultisnipseditsplit="vertical"

"" ctrlp init
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.class     " macosx/linux
set wildignore+=.git/**,public/assets/**,vendor/**,log/**,tmp/**,cellar/**,app/assets/images/**,_site/**,home/.vim/bundle/**,pkg/**,**/.gitkeep,**/.ds_store,**/*.netrw*,node_modules/*

"filetype plugin indent on " enable after vundle loaded

" allow editing crontabs http://vim.wikia.com/wiki/editing_crontab
set backupskip=/tmp/*,/private/tmp/* "
set undodir=~/.vim/undo
set noswapfile " because no need
set nobackup

syntax enable
set t_co=256  " 2000s plz
set textwidth=80  " switch line at 80 characters
set scrolloff=5   " keep some distance to the bottom"
set showmatch     " show matching of: () [] {}
set ignorecase    " required for smartcase to work
set smartcase     " case sensitive when uppercase is present
set incsearch     " search as you type
set smartindent   " Be smart about indentation
set expandtab     " Tabs are spaces
set smarttab
set shell=$SHELL\ -l  " load shell for ruby version etc.

set tabstop=2 " Tabs are 2 spaces
set backspace=2 " Backspace deletes 2 spaces
set shiftwidth=2 " Even if there are tabs, preview as 2 spaces

set list " Highlight trailings, stolen from @teoljungberg
set listchars=tab:>-,trail:.,extends:>,precedes:<

" TODO
set tags=tags,.git/tags " Use commit hook tags, see ~/.git_template

" Buffer Movement
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h
imap jk <esc>
map <leader>d :bd<CR>

" Sane behavior on long lines
nmap k gk
nmap j gj
noremap H ^
noremap L $

" vim-fugative, make my life easier.
map <leader>gs :Gstatus<CR> " Get status
map <leader>gw :Gwrite<CR> " Stage the current file for a commit
map <leader>gc :Gcommit<CR> " Commit
map <leader>gp :Gpush<CR> " Push changes

" Save files
map <leader>s :wa<CR>

" Quit
map <leader>q :q<CR>

" Undo/Redo
map <leader>z :u<CR> " undo
map <leader>re :redo<CR> " redo

" Run the current ruby file.
map <leader>x :!ruby %<cr>


" Rename current file, thanks Gary Bernhardt via Ben Orenstein
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>r :call RenameFile()<cr>

" Edit files in new vertical split
function! EditFile()
  let new_file = input('Edit file name: ')
  if new_file != ''
    exec ':vsplit ' . new_file
  endif
endfunction
map <leader>e :call EditFile()<cr>

" Add a little love with leader l
map <leader>l :exe ":normal i" . "â™¥"<CR>


" Sane default tab-key, replaces Supertab.
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
"imap <tab>   <c-r>=InsertTabWrapper()<cr>
imap <s-tab> <c-n>

au BufNewFile,BufRead *.ejson set filetype=json
au BufNewFile,BufRead *.sxx set filetype=stp

autocmd BufNewFile,BufRead *.md,*.markdown set spell

autocmd FileType go,gitcommit,qf,gitset setlocal nolist " Go fmt will use tabs

set background=dark
colorscheme solarized

set guifont=Hack:h10
set guioptions-=T " Removes top toolbar
set guioptions-=r " Removes right hand scroll bar
set go-=L " Removes left hand scroll bar

let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
let g:syntastic_typescript_checkers = ['tslint']
let g:ycm_key_list_select_completion = ['<TAB>']
